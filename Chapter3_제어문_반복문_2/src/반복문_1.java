/*
 * 1. 데이터베이스(윈도우) --> 윈도우는 안하려고 함
 * 1-1 네트워크  =--- 미니 프로젝트 => MVC(Spring)
 * 2. JSP =>Jquery(Ajax)
 * 3. Spring => VueJS
 * 4. 개인 프로젝트 => 스프링부트/MySQL, ReactJS(Redux)
 * 												----2023.04.04
 * 
 * 	반복문: 유사한 내용이 여러번 반복할 때 주로 사용
 * 		  영화목록 , 맛집목록 , 메인화면 .. 상세보기(는 보통if많이씀)
 * 		  페이징출력(1,2,3..)
 * 	종류)
 * 		반복횟수가 정해져 있는 경우 보통 for문을 쓴다.
 * 		반복횟수가 정해지지 않은 경우 보통 while문을 쓴다.
 * 		한번 이상 수행 가능한 경우 보통 do~while문을 쓴다.
 * 		-----------------------------------------
 * 		Java: 출력,제어할 땐 for문(2차+중첩)
 * 			  데이터베이스, 네트워크 연결에는 while문(1차)
 * 	형식)
 * 		for문 형식
 * 			for(초기값;조건값;증가식)
 *				 1 	   2    4		=> 2번 false면 종료/ 2번 true면 반복문장수행
 * 				{
 * 					반복 수행문장 3
 * 				}
 * 		while문 형식
 * 		----------------
 * 		초기값	--------------1
 * 		while(조건문) ----------2 ===> 조건문이 false면 수행 못할 수도 있다.
 * 		{
 * 			반복문장 수행문장------3	
 * 			증가식 -------------4 => 2번 이동(true수행, false면 종료)
 * 		}
 * 		-----------------
 * 		
 * 		do~while문 형식
 * 		초기값 ----------------1
 * 		do{
 * 			반복 수행문장 ------2
 * 			증가식 -----------3
 * 		} while조건문; -------4   ====> 조건문이 후처리되기 때문에 false여도 반복 수행문장은 무조건 1번 이상 수행한다.
 * 
 * 		for-> 2차
 * 					  
 * 
 */
public class 반복문_1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
	   /*String[] food= {
				"버섯으로 관자 느낌 내는 방법! 새송이버섯간장버터구이 만들기",
				"아삭아삭한 고추된장박이",
				"달콤 짭조름♡ 떡 베이컨 간장조림♡",
				"누텔라 견과류 토스트 만들기",
				"새송이버섯버터굴소스볶음 간단반찬",
				
		};
		String[] chef= {
				"루던",
				"돌하우스",
				"요블리",
				"dddd516",
				"라피네",
				
		};
		for(int i=0;i<5;i++)
		{
			System.out.println(food[i]+"("+chef[i]+")");
		} */
		
		/*		 1    2    4
		 * 	for(초기값;조건식;증가식)
		 * 	{
		 * 		반복 수행문장  3
		 *  }
		 *  
		 *  1-2-3-4
		 *    2-3-4
		 *    2-3-4
		 *    ...
		 *    2번에서 false면 종료.
		 */
		 // 지역변수(블록변수) => 일시적으로 스택에 저장되고, 메모리에 의해 자동삭제됨. 
		
		for(int i=1;i<=10;i++)		// 여기서 i는 for문 안에서만 사용.
		{
			System.out.println(i+" ");
		}
		System.out.println("========================");
		// A~Z 출력 ==> 문제 A를 26개 출력
	/*	for(char c='A'; c<='Z';c++)
		{
			System.out.print(c+" ");
		} */
		
		char c='A';
		for(int i=0;i<26;i++)
		{
			System.out.print(c++ + " ");
		}
		System.out.println("\n==================");
		System.out.println("==== while ======");
		/*
		 * 	while문
		 * 	형식)
		 * 	초기값 --------------1
		 * 	while(조건식) ------2
		 * 	{
		 * 		반복 수행문장-----3
		 * 		증가식 ---------4
		 * 	}
		 * 
		 * 
		 * => 무한루프 (네트워크 서버, 데이터베이스 값 읽기, 파일 읽기)
		 * => 파일읽기 -> -1(EOF)가 나올때 까지.
		 * 
		 *
		 * 1~10까지 출력 */
		int i=1;		//초기값(시작점)
		while(i<=10)	//조건식(종료점) =>i가 10이 되면 종료
		{
			System.out.print(i+" ");
			i++; // 제어 1~10이 되도록 증가 시킴. (종료 시까지 제어점)
		}
		 System.out.println("\n======================");
		 c='A';  // 이미 메인 안에 사용 중인 c이 있기 때문에 또다시 선언할 필요가 없이 언급만 함.
		 i=0;
		 while(i<26)
		 {
			 System.out.print(c++ + " ");
			 i++;
		 }
		 System.out.println("\n=====================");
		 /*
		  *   do~while: 후조건, 무조건 1번은 수행한다.
		  *   형식)
		  *   	초기값 	===> 1
		  *   	do
		  *   	{
		  *   		반복 실행문장  ===>2
		  *   		증가식       ===>3
		  *   	} while(조건식)  ===>4
		  *   
		  *   
		  *   int i=1;
		  *   do
		  *   {
		  *   	System.out.print(i+" ");
		  *   	=> 1, i=1
		  *  	i++;
		  *  	=> i=2
		  *   }while(i<=10);
		  *   
		  */
		System.out.println("\n=======do~while=========");
		 i=1;
		 do
		 {
			 System.out.print(i+" ");
			 i++;
		 }while(i<=10);
			System.out.println("\n======================");
			c='A';
			i=0;
			do	{
				System.out.print(c++ + " ");
				i++;
			}while(i<26);
	}

}

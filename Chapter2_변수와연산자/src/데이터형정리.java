/*   (2023.03.28)
 * 			데이터 저장 							- 데이터 가공 				-가공된 데이터 출력
 * 			1. 한 개의 데이터를 저장 		=> 변수 	ㄱ    							> 사용자 정의 데이터
 * 			2. 같은 데이터를 여러 개 저장	=> 배열	ㅣ
 * 			3. 다른 데이터를 여러 개 저장	=> 클래스 ㄴ 메모리(램)에 저장. 단점 휘발성. 파일/오라클(RDBMS)같은 영구저장장치를 이용하는 이유.	
 * 						
 * 													1. 연산자  ㄱ
 * 													2. 제어문  ㄴ 메소드. 메소드 여러개가 모이면 컴퍼넌트. 
 * 									
 * 																		어디서 출력하느냐에 따라 다름
 * 																		1. 핸드폰 : Mobile
 * 																		2. 윈도우창 : Application
 * 																		3. 브라우저 : WebApplication
 * 
 * 		- 상속/해저
 * 		- 객체지향프로그램은 재사용이 가능. 클래스로 묶어서 사용하기 때문. 클래스를 사용하는걸 보면 재사용하려나보다 하고 의도를 생각할 수 있음.
 * 		(유지보수) 재사용할 때 필요한 부분/필요없는 부분 수정하고 사용함 >  오버라이딩(MODIFY) 덮어씀/변경함 vs 오버로딩(NEW)
 * 		기능별로 모아서 쓰는게 중요. 기능별로 분리하는 방법 배우기. 
 * 
 */
/*
 * 			1. 기본형 : 메모리 크기를 지원한다
 * 					1byte / 2byte / 4byte / 8byte   => 자바에서 지원함.
 * 					=> 12byte를 저장하고 싶을 땐 어떻게? 다른건 8밧+4밧(클래스) or 같은건 4밧+4밧+4밧(배열) or ... > 이럴때 이용하는게 배열!
 * 
 */


/*
 * 		변수 설정 => 자바에서 지우넣나느 데이터형을 미리 숙지
 * 		0,1만 저장 (항상 숫자로 저장된다)
 * 			=> 문자는 각 문자마다 숫자를 가지고 있다.
 * 			bit > byte > word > record
 * 			============
 * 			l	
 * 			0,1 -> bit가 8개 = 1byte
 * 			------------------------
 * 			0(1) 1 1 1 1 1 1 1 		
 * 			------------------------	
 * 			l
 * 			부호비트(0:양수, 1:음수)
 * 			=> 컴퓨터에서 모든 숫자는 int 인식, 실수 -> double
 * 			-----------------------------------------------------------
 * 			데이터형 1byte(8bit) 2byte(16bit) 4byte(32byte) 8byte(64bit)
 * 			----------------------------------------------------------
 * 			정수       
 * 			
 *			byte 		O	( 네트워크 전송 , 파일 업로드 , 파일 다운로드 )
 *					-128~127 (범위를 벗어나면 오버플로우 발생)
 *
 *					-3~2
 *
 *					-3	-2	-1	0	1	2	=> 3 없으면=> 2(가장가까운)다음 값인-3를 가져오는걸 오버플로우 라고 함.
 * 			----------------------------------------------------------
 * 			(X) short					O	( C언어 호환 )
 * 			----------------------------------------------------------
 * 			int									O	(default)
 * 				 모든 정수의 기본 (웹 대부분) => hit , 고유번호
 * 			----------------------------------------------------------
 * 			long											O	
 * 						int / long의 구분은 l(L)
 * 			----------------------------------------------------------
 *			실수 
 * 			
 * 			(X) float								O
 * 			----------------------------------------------------------
 *			double							(default)		O
 *						double / float 구분은 f(F)
 * 			----------------------------------------------------------
 * 			문자
 * 			
 * 			char					O (0~65535) 각국의 언어 사용이 가능
 * 									UTF-8 (Unicode)
 * 									' ' 싱글따옴표를 사용해서 저장
 * 						"" => String 문자열
 *   		----------------------------------------------------------
 *			논리
 * 			
 *   		boolean  	O 		true/false => 조건문을 만들 경우에 사용
 *   						=> 삼항연산자 , if , while , for , do~while
 * 			----------------------------------------------------------
 *	
 *			크기
 *			byte < short < int < long < float < double
 *					char
 *					** boolean 은 제외
 *					수표현이 많을수록 크기가 크다.
 *				long= 1 , float= 1.000000 => 2^6
 *				char은 정수로 취급할때 있음.
 *				'A'  => 65 
 *				'a'  => 97	
 *				'0'  => 48  '1' = 49 , '2'= 50  0 != '0'
 *			
 *				변수는 한 개만 저장하는 메모리 공간의 이름( 주소 대신 주는 별칭)
 *				-------------------------------------------------
 *				변수
 *				1) 선언
 *					데이터형 변수명;
 *				2) 초기화
 *					변수=값
 *					= 명시적 초기화
 *						int a;
 *						a=10;
 *					= 난수 (임의의 값)
 *					= 입력을 받아서 초기화
 *				3) 선언과 동시에 초기화 
 *					데이터형 변수명=값
 *				4) 데이터형에 대입 : 항상 왼쪽이 크거나 같다
 *					byte 값(byte)
 *					int 값(bye,int,char)
 *					byte b=10;
 *					int a=b, 'A', 100
 *					long 값(byte,int,char,long)
 *					float 값(byte,int,char,long,float)
 *					double 값((byte,int,char,long,float,double)
 *
 *					int a='A'; a=? 65
 *					double d=10; d=? 10.0
 *					
 */
public class 데이터형정리 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
			//byte b=(byte)300;
			//System.out.println(b);
							// 300 =>  256 1 128 0 64 0 32 1 16 0 8 1 4 1 2 0 (10010110 => 총 9자리)
						 	// byte는 8개 까지만 수용 가능. 뒤에서 8개 가져옴(앞에 큰거 빠짐)
							//	0 0 1 0 1 1 0 의 32 8 4 만 가져와서 총합 44
			System.out.println(0);
			System.out.println((int)'0');
			System.out.println(0-10);
			System.out.println('0'-10);
			int a='A';
			System.out.println(a);
	}

}

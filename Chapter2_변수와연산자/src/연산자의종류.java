/*
 * 		피연산자 / 연산자
 * 		------- 연산 대상
 * 
 * 		피연산자 1개 : 단항연산자
 * 		 a++
 * 		피연산자 2개 : 이항연산자
 * 		10 + 20
 * 		---  ---  
 * 		피연산자 3개 : 삼항연산자
 *
 *		1. 단항연산자
 *			= 증감연산자	(++ , -- ) 한 개 증가 , 한 개 감소  => 반복문
 *			int a=10;
 *			a++;
 *			 =>	11
 *			int b=10;
 *			b--;
 *			 => 9
 *			= 부정연산자 (boolean만 사용 가능) => 턴
 *			  boolean b=true;
 *			  !b;
 *			  false
 *				===> 예약 가능한 날(NOT) 
 *			= 형변환연산자 (데이터형)
 *			  (int)10.5 =>소수점 제거(버림) 10
 *			  (char)65 => 'A'
 * 			================================ downcasting (데이터 크기가 형변환 후 커짐- 강제형변환)
 *			  (int)'A' => 65
 *			  (double)10 => 10.0 
 * 			================================ upcasting (작아짐- 자동형변환)
 *			= 반전연산자  (양수->음수) 음수표현 ~로 표현(물결)
 *			
 *			10.5+10=20.5 => 데이터형이 동일한 것끼리만 가능하기 때문에 자바는 계산할 수 없음....
 *				---
 *				10.0 (자동형변환>더블로)=20.5
 *			
 *			'A' + 10
 *			---
 *			65  + 10 = 75
 *
 *			int이하는 데이터형은 연산 시에 결과값이 int이다.
 *			---------- byte/short/char 는 모두 int가 됨(int가 없어도)
 *			
 *			int + double = double
 *			char + long = long
 *			int + long = long
 *			long + double = double
 *			
 *			byte + char = int
 *
 *			1. 단항연산자
 *				++ : 1개 증가
 *				-- : 1개 감소
 *
 *				형식
 *				 = 전치연산자 : 먼저 계산/증가나 감소
 *					++a
 *				 = 후치연산자 : 나중에 계산/증가나 감소
 *					a++
 *
 *				int a= 10;
 *				int b = ++a; 				// 대입 후에 증가
 *					--  ----
 *						1	
 *					2				====> a= 11, b:11
 *
 *				int a=10;
 *				int b = a++;				// 증가 후에 대입
 *					-- 	----
 *					1			===> b=10, a=11 a만증가, b는 다음에 증가
 *						2  
 *
 *
 *
 *
 *		int a=10;
		int b=a++ + a++;   (b= 10 -> b=11) = 21
		System.out.println(b);
 *
 *
 *		int a=10;
 *		int b=++a + ++a;  // 23
 *
 *		int a=10;
 *		int b=++a + a++;  // 22
 *
 *		int a=10;
 *		int b=a++ + ++a;
 *			  ---	----
 *			   10    11+1=12  // 22
 *
 *		int a=10;
 *		int b=a++ + a++ + ++a + a++
 *			  10 	11 	   13 	13    //  47
 *
 *		int a=10;
 *		int b=a++ + a++ + a++ + a++
 *			10 11 12 13 // 46
 *
 *		int a=10;
 *		int b=++a + ++a + ++a + ++a
 *				11 	12		13	14   // 50
 *
 *
 *		int a=10;
 *		int b=a-- + a-- + --a
 *				10 	9		7	// 26
 *
 *			2. 부정연산자 (!) ==> true/false
 *				!true => false
 *				!false=> true
 *
 *				==	, != , !(조건) 
 *
 *			3. 형변환연산자
 *			   10.5+10.5 ==> 21.0
 *			   (int)10.5+(int)10.5 ===> 20  1번 형변환 2번 연산
 *				-------   --------
 *				  10   + 	10
 *				(int)(10.5+10.5) => 21
 *					------------	
 *						21.0     => 21
 *
 *
 *				double d=10;  ---> 10.0
 *				int a='A';     ---> 65
 *				int a=(int)10.5;
 *				
 *				==> int 이하 데이터형은 연산 시 int로 바뀜~
 *					-----byte, short, char
 *				==> char는 연산되면 정수로 변경됨.
 *
 *
 *			이항연산자
 *			-------
 *			  산술연산자 : + . - . * , / , %
 *				=> + , - , * : 데이터형
 *				=> +
 *					산술연산, 문자열 결합
 *				=> / 
 *					정수/정수=정수  => 10/3 = 3 (3.333(X) 소수점버림)
 *					정수/실수 		=> 10/3.0 
 *					0으로 나누면 오류 발생
 *				=> %
 *					나누고 나머지
 *					10%2 = 0
 *					11%2 = 1
 *					-------------- 
 *					-5%2 = -1
 *					5%-2 = 1
 *					-5%-2 = -1
 *					--------------> 부호는 왼쪽 편을 따라간다
 *
 *
 *				******* + 연산자
 *					+ 10+9=19
 *					+ : 문자열 결합
 *						"7"+77  ==> "777"
 *					7+"7"+7   앞부터 계산
 *					7+7+"7"  앞부터 계산 14+"7" = 147
 *
 *					7 + "7" + 7 + 7 앞부터 "77"> "777"> "7777"
 *
 *					7 + "7" +(7 + 7) 괄호부터 7 + "7" + 14 > "77" + 14 > "7714"
 *
 *			
 *									
 */
public class 연산자의종류 {
	public static void main(String[] args) {
		//byte b=10;
		//char c='A';
		//int a=b+c
		//System.out.println(~100);
		/*
		 * int a=10; int b=a++; System.out.println("a="+a); System.out.println("b="+b);
		 */		
		
		//int a=10;
		//int b=a++ + a++ + ++a + a++;
		//System.out.println(b);
		
		//boolean bCheck=false;
		//System.out.println(bCheck);
		//System.out.println(!bCheck);
		
		int a=(int)(Math.random()*100)+1;  //random은 0.0~0.99까지. *100 하면 0~99 랜덤.
		//         ------------------
		//			0.0~0.99 
		//     ----
		//  						  ---
		
		System.out.println(a);
		System.out.println(10/3);
		System.out.println(10/3.0); /// = (10/(double)3); 도 가능.
		
		
		
	}
}

